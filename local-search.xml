<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>el表单条件判断验证失败</title>
    <link href="/2021/03/15/el%E8%A1%A8%E5%8D%95%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5/"/>
    <url>/2021/03/15/el%E8%A1%A8%E5%8D%95%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5/</url>
    
    <content type="html"><![CDATA[<p>el 表单 条件判断失效的解决办法。</p><a id="more"></a><h1 id="BUG-重现"><a href="#BUG-重现" class="headerlink" title="BUG 重现"></a>BUG 重现</h1><p>Element UI 是比较常见的 UI 库了,当然遇到的问题还是比较多,今天遇到一个需求时候发现了一个问题.<br>例如表单存在条件判断(用 v-if),符合条件渲染时候会导致验证失效.<br>找原因的时候切换为使用(v-show),是可以解决这个 bug,但是同时会导致一个隐藏的问题–想要隐藏的 el-form-item 会因为触发验证导致不通过.</p><h1 id="网上的解决方法"><a href="#网上的解决方法" class="headerlink" title="网上的解决方法:"></a>网上的解决方法:</h1><p>1.在 v-if 的元素(如 div 等)上加上 key 值<br>2.v-if 改为 v-show<br>3.el-form-item 标签前加一个 div</p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p>第一和第二种都不太符合我的需求,第三种亲测有效.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Element</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stripe国际支付(旧版)</title>
    <link href="/2021/03/03/stripe%E5%9B%BD%E9%99%85%E6%94%AF%E4%BB%98/"/>
    <url>/2021/03/03/stripe%E5%9B%BD%E9%99%85%E6%94%AF%E4%BB%98/</url>
    
    <content type="html"><![CDATA[<p>Stripe 国际支付对接</p><a id="more"></a><h1 id="关于-Stripe"><a href="#关于-Stripe" class="headerlink" title="关于 Stripe"></a>关于 Stripe</h1><p>Stripe 是由 20 多岁的两兄弟 Patrick Collison 和 John Collison 创办的 Stripe 为公司提供网上支付的解决方案.</p><h1 id="对-Stripe-的看法"><a href="#对-Stripe-的看法" class="headerlink" title="对 Stripe 的看法"></a>对 Stripe 的看法</h1><p>对于 <code>Stripe</code>，我就觉得很对中国开发者不友好,因为它的开发文档都是英文,让我这种英语不太 ok 的干饭人确实很苦恼。</p><h1 id="为什么要用-Stripe"><a href="#为什么要用-Stripe" class="headerlink" title="为什么要用 Stripe?"></a>为什么要用 Stripe?</h1><p>因为所在公司是港企,对于 HK 那边的业务大多顾客是国际友人,也不大多可能使用上支付宝和微信这种,需要用到付款,所以就采用了 <code>Stripe</code> 支付.</p><h1 id="正题–前端接入"><a href="#正题–前端接入" class="headerlink" title="正题–前端接入"></a>正题–前端接入</h1><p>一开始瞄上了旧版的 <code>Stripe Checkout</code>,因为实在太简单了,高度集成的方式,写页面的时间都省去了,至于怎么接的就看下面吧.</p><pre><code class="javascript">function stripeCard() {  const script = document.createElement(&#39;script&#39;);  script.src = &#39;https://checkout.stripe.com/checkout.js&#39;;  script.className = &#39;stripe-button&#39;;  script.dataset.key = &#39;你的测试key&#39;;  script.dataset.amount = allPrice * 100;  script.dataset.name = &#39;PPG&#39;;  script.dataset.description = &#39;&#39;;  script.dataset.image =    &#39;https://stripe.com/img/documentation/checkout/marketplace.png&#39;;  script.dataset.locale = &#39;auto&#39;;  script.dataset.zipCode = &#39;false&#39;; // Note camelCase!  script.dataset.currency = &#39;usd&#39;; // 金钱符号  script.dataset.locale = lanObj[lan]; // 初始语言  script.dataset.label = subBtn[lan]; // 按钮文字  script.dataset.allowRememberMe = &#39;false&#39;; // 是否勾选记住我  let form = document.getElementById(&#39;THEFORM&#39;);  form.appendChild(script);  script.onload = function () {    layer.closeAll(); //疯狂模式，关闭所有层    console.log(&#39;支付表单初始化完成&#39;);  };}</code></pre><h1 id="相关解释"><a href="#相关解释" class="headerlink" title="相关解释"></a>相关解释</h1><p>其实原理很简单,生成一个 token,把 token 给后端去扣款就 ok 了,就是直接一个表单的事,等用户填完所有信息,渲染出来,但是全部用户信息都是由第三方托管,隐私安全性得到很好的提升.当初我接入的时候可是一头雾水,也找不到官方文档,因为现在的已经是新版的 checkout 方式了,这种老版本很多属性都不兼容,例如支付宝等.</p><h2 id="旧版官网-Link"><a href="#旧版官网-Link" class="headerlink" title="旧版官网 Link"></a>旧版官网 Link</h2><p><a href="https://stripe.com/docs/legacy-checkout" target="_blank" rel="noopener">https://stripe.com/docs/legacy-checkout</a></p><h2 id="对接时候的辛酸"><a href="#对接时候的辛酸" class="headerlink" title="对接时候的辛酸"></a>对接时候的辛酸</h2><p>因为当初一直找不到这个文档,很多属性需要琢磨怎么 set,哪些可以有,哪些可以无,被逼无奈我只能去啃源码,真的是找 <code>checkout.js</code> 的源码来看属性,辛酸…</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>没办法,做好才没多久,产品说需要出现隐私条款等具有法律效应的申明,但是旧版就没有,我靠!!!!<br>意思是我花那么多时间啃源码都是没用了??!!</p><p>确实没用了,直接换新版的 stripe.checkout,等下篇再说怎么接的吧.</p>]]></content>
    
    
    
    <tags>
      
      <tag>支付</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闪烁</title>
    <link href="/2021/02/18/%E8%B7%B3%E5%8A%A8/"/>
    <url>/2021/02/18/%E8%B7%B3%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>Css 笔记</p><a id="more"></a><p>场景用于下单按钮闪烁，提示用户点击。</p><pre><code class="javascript">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        .subAnimated {            -webkit-animation-duration: 1s;            animation-duration: 1s;            -webkit-animation-fill-mode: both;            animation-fill-mode: both        }        .subAnimated.subInfinite {            -webkit-animation-iteration-count: infinite;            animation-iteration-count: infinite        }        .subFlash {            -webkit-animation-name: flash;            animation-name: flash        }        @-webkit-keyframes flash {            0%,            100%,            50% {                opacity: 1            }            25%,            75% {                opacity: 0.4            }        }        @keyframes flash {            0%,            100%,            50% {                opacity: 1            }            25%,            75% {                opacity: 0.4            }        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;button type=&quot;success&quot; class=&quot;subFlash subAnimated subInfinite&quot;&gt;按钮&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跳动</title>
    <link href="/2021/01/04/%E9%97%AA%E7%83%81/"/>
    <url>/2021/01/04/%E9%97%AA%E7%83%81/</url>
    
    <content type="html"><![CDATA[<p>Css 笔记</p><a id="more"></a><p>css3 动画–跳动</p><pre><code class="javascript">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;  &lt;title&gt;css动画--元素上下跳动&lt;/title&gt;  &lt;style type=&quot;text/css&quot;&gt;    @-webkit-keyframes bounce-down {      25% {        -webkit-transform: translateY(-10px);      }      50%,      100% {        -webkit-transform: translateY(0);      }      75% {        -webkit-transform: translateY(10px);      }    }    @keyframes bounce-down {      25% {        transform: translateY(-10px);      }      50%,      100% {        transform: translateY(0);      }      75% {        transform: translateY(10px);      }    }    .animate-bounce-down {      background: #333;      width: 100px;      height: 100px;      margin: 100px auto;      -webkit-animation: bounce-down 1.5s linear infinite;      animation: bounce-down 1.5s linear infinite;    }    @-webkit-keyframes bounce-up {      25% {        -webkit-transform: translateY(10px);      }      50%,      100% {        -webkit-transform: translateY(0);      }      75% {        -webkit-transform: translateY(-10px);      }    }    @keyframes bounce-up {      25% {        transform: translateY(10px);      }      50%,      100% {        transform: translateY(0);      }      75% {        transform: translateY(-10px);      }    }    .animate-bounce-up {      background: #ddd;      width: 100px;      height: 100px;      margin: 100px auto;      -webkit-animation: bounce-up 1.4s linear infinite;      animation: bounce-up 1.4s linear infinite;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div class=&quot;animate-bounce-up&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;animate-bounce-down&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js语法</title>
    <link href="/2020/10/18/js%E8%AF%AD%E6%B3%95/"/>
    <url>/2020/10/18/js%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>有些语法久了就容易忘记或者容易混乱，这模块用于记录一些语法笔记。</p><a id="more"></a><h1 id="Splice"><a href="#Splice" class="headerlink" title="Splice"></a>Splice</h1><p>splice（删除的起始位置，需要删除的项数）</p><p>splice（删除的起始位置，需要删除的项数，要插入的第 1 项，要插入的第 2 项、）</p><p>例：</p><pre><code class="javascript">var arr1 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;];var arr2 = arr1.splice(1, 2, &#39;newvalue&#39;);console.log(arr2); //[&quot;c&quot;,&quot;d&quot;] //返回的是删除的项console.log(arr1); //[&quot;a&quot;,&quot;newvalue&quot;,&#39;d&#39;,&#39;e&#39;] //在删除的地方插入</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>watch与computed区别</title>
    <link href="/2020/05/05/watch%E4%B8%8Ecomputed%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/05/05/watch%E4%B8%8Ecomputed%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>记录 watch 与 computed 中详细的区别</p><a id="more"></a><h1 id="特别申明"><a href="#特别申明" class="headerlink" title="特别申明"></a>特别申明</h1><p>此文转载于 Timothy 博客</p><h1 id="About-Computed"><a href="#About-Computed" class="headerlink" title="About Computed"></a>About Computed</h1><ul><li>支持缓存，只有依赖数据发生改变，才会重新进行计算</li><li>不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化</li><li>computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于 data 中声明过或者父组件传递的 props 中的数据通过计算得到的值</li><li>如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用 computed</li><li>如果 computed 属性属性值是函数，那么默认会走 get 方法；函数的返回值就是属性的属性值；在 computed 中的，属性都有一个 get 和一个 set 方法，当数据变化时，调用 set 方法。</li></ul><p><img src="/img/computedimg.png" srcset="/img/loading.gif" alt=""></p><h1 id="About-Watch"><a href="#About-Watch" class="headerlink" title="About Watch:"></a>About Watch:</h1><ul><li>不支持缓存，数据变，直接会触发相应的操作</li><li>watch 支持异步； 3.监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值</li><li>当一个属性发生变化时，需要执行对应的操作；一对多；</li><li>监听数据必须是 data 中声明过或者父组件传递过来的 props 中的数据，当数据变化时，触发其他操作，函数有两个参数，<br>　　 immediate：组件加载立即触发回调函数执行，<br>　　 deep: 深度监听，为了发现对象内部值的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做。注意：deep 无法监听到数组的变动和对象的新增，参考 vue 数组变异,只有以响应式的方式触发才会被监听到。<br><img src="/img/watchone.png" srcset="/img/loading.gif" alt=""></li></ul><p>监听的对象也可以写成字符串的形式</p><p><img src="/img/watchtwo.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>identify图形验证码</title>
    <link href="/2020/04/23/identify%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <url>/2020/04/23/identify%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>Vue 插件 identify 的使用配置。</p><a id="more"></a><h1 id="identify"><a href="#identify" class="headerlink" title="identify"></a>identify</h1><p>identify 是使用 canvas 来生成图形验证码的一个插件，下面记录些配置与写法。</p><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><p><img src="/img/incode.png" srcset="/img/loading.gif" alt=""></p><h1 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h1><p>1.在 vue 项目的 src/components 文件夹下新建 identify.vue 文件，写入如下代码</p><pre><code class="vue">&lt;template&gt;  &lt;div class=&quot;s-canvas&quot;&gt;    &lt;canvas      id=&quot;s-canvas&quot;      :width=&quot;contentWidth&quot;      :height=&quot;contentHeight&quot;    &gt;&lt;/canvas&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: &quot;SIdentify&quot;,  props: {    identifyCode: {      // 默认注册码      type: String,      default: &quot;1234&quot;,    },    fontSizeMin: {      // 字体最小值      type: Number,      default: 25,    },    fontSizeMax: {      // 字体最大值      type: Number,      default: 35,    },    backgroundColorMin: {      // 验证码图片背景色最小值      type: Number,      default: 200,    },    backgroundColorMax: {      // 验证码图片背景色最大值      type: Number,      default: 220,    },    dotColorMin: {      // 背景干扰点最小值      type: Number,      default: 60,    },    dotColorMax: {      // 背景干扰点最大值      type: Number,      default: 120,    },    contentWidth: {      // 容器宽度      type: Number,      default: 116,    },    contentHeight: {      // 容器高度      type: Number,      default: 38,    },  },  methods: {    // 生成一个随机数    randomNum(min, max) {      return Math.floor(Math.random() * (max - min) + min);    },    // 生成一个随机的颜色    randomColor(min, max) {      let r = this.randomNum(min, max);      let g = this.randomNum(min, max);      let b = this.randomNum(min, max);      return &quot;rgb(&quot; + r + &quot;,&quot; + g + &quot;,&quot; + b + &quot;)&quot;;    },    drawPic() {      let canvas = document.getElementById(&quot;s-canvas&quot;);      let ctx = canvas.getContext(&quot;2d&quot;);      ctx.textBaseline = &quot;bottom&quot;;      // 绘制背景      ctx.fillStyle = this.randomColor(        this.backgroundColorMin,        this.backgroundColorMax      );      ctx.fillRect(0, 0, this.contentWidth, this.contentHeight);      // 绘制文字      for (let i = 0; i &lt; this.identifyCode.length; i++) {        this.drawText(ctx, this.identifyCode[i], i);      }      this.drawLine(ctx);      this.drawDot(ctx);    },    drawText(ctx, txt, i) {      ctx.fillStyle = this.randomColor(50, 160); // 随机生成字体颜色      ctx.font =        this.randomNum(this.fontSizeMin, this.fontSizeMax) + &quot;px SimHei&quot;; // 随机生成字体大小      let x = (i + 1) * (this.contentWidth / (this.identifyCode.length + 1));      let y = this.randomNum(this.fontSizeMax, this.contentHeight - 5);      var deg = this.randomNum(-30, 30);      // 修改坐标原点和旋转角度      ctx.translate(x, y);      ctx.rotate((deg * Math.PI) / 180);      ctx.fillText(txt, 0, 0);      // 恢复坐标原点和旋转角度      ctx.rotate((-deg * Math.PI) / 180);      ctx.translate(-x, -y);    },    drawLine(ctx) {      // 绘制干扰线      for (let i = 0; i &lt; 4; i++) {        ctx.strokeStyle = this.randomColor(100, 200);        ctx.beginPath();        ctx.moveTo(          this.randomNum(0, this.contentWidth),          this.randomNum(0, this.contentHeight)        );        ctx.lineTo(          this.randomNum(0, this.contentWidth),          this.randomNum(0, this.contentHeight)        );        ctx.stroke();      }    },    drawDot(ctx) {      // 绘制干扰点      for (let i = 0; i &lt; 30; i++) {        ctx.fillStyle = this.randomColor(0, 255);        ctx.beginPath();        ctx.arc(          this.randomNum(0, this.contentWidth),          this.randomNum(0, this.contentHeight),          1,          0,          2 * Math.PI        );        ctx.fill();      }    },  },  watch: {    identifyCode() {      this.drawPic();    },  },  mounted() {    this.drawPic();  },};&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre><p>2.在组件引入使用</p><pre><code class="vue">&lt;template&gt;  &lt;div class=&quot;testPage&quot;&gt;    &lt;h1&gt;{{ msg }}&lt;/h1&gt;    &lt;div @click=&quot;changeCode()&quot;&gt;      &lt;!-- 引入验证码组件 --&gt;      &lt;identify :identifyCode=&quot;identifyCode&quot;&gt;&lt;/identify&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;// 引入验证码组件import identify from &quot;../../components/identify&quot;;export default {  name: &quot;testPage&quot;,  // 注册验证码组件  components: { identify },  data() {    return {      msg: &quot;图形验证码&quot;,      // 验证码初始值      identifyCode: &quot;&quot;,      // 验证码的随机取值范围      identifyCodes: &quot;1234567890&quot;,    };  },  mounted() {    // 刷新页面就生成随机验证码    this.identifyCode = &quot;&quot;;    this.makeCode(this.identifyCodes, 4);  },  methods: {    // 点击验证码刷新验证码    changeCode() {      this.identifyCode = &quot;&quot;;      this.makeCode(this.identifyCodes, 4);    },    // 生成一个随机整数  randomNum(0, 10) 0 到 10 的随机整数， 包含 0 和 10    randomNum(min, max) {      max = max + 1;      return Math.floor(Math.random() * (max - min) + min);    },    // 随机生成验证码字符串    makeCode(data, len) {      for (let i = 0; i &lt; len; i++) {        this.identifyCode += data[this.randomNum(0, data.length - 1)];      }      console.log(this.identifyCode);    },  },};&lt;/script&gt;</code></pre><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>java 后端也可以生成图形验证码返回给前端，至于怎样用就看具体需求了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ifame载入完成事件监听</title>
    <link href="/2020/04/17/ifame%E8%BD%BD%E5%85%A5%E5%AE%8C%E6%88%90%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    <url>/2020/04/17/ifame%E8%BD%BD%E5%85%A5%E5%AE%8C%E6%88%90%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
    
    <content type="html"><![CDATA[<p>如何监听 ifame 的载入完成</p><a id="more"></a><h1 id="关于-ifame"><a href="#关于-ifame" class="headerlink" title="关于 ifame"></a>关于 ifame</h1><p>iframe 标签是规定一个内联框架，用来在当前 HTML 文档中嵌入另一个文档(<strong><em>这里不过多阐述基本的 ifame 理念和用法</em></strong>)。</p><h1 id="对-ifame-的看法"><a href="#对-ifame-的看法" class="headerlink" title="对 ifame 的看法"></a>对 ifame 的看法</h1><p>对于 <code>ifame</code>，很多朋友都会摒弃或者不愿意采用它，因为它本身坑就很多，安全问题，消耗还高，但是恰巧有个需求让我入了这块的坑。</p><h1 id="为什么一定要用-ifame"><a href="#为什么一定要用-ifame" class="headerlink" title="为什么一定要用 ifame"></a>为什么一定要用 ifame</h1><p>我也不想用啊！但是遇到的需求是这样的：我方的页面需要嵌套第三方的页面并且还要在嵌套的页面做一个返回按钮（ios 用户没有物理返回键）<br>别问我为啥一定要返回，问就是让你做你就做。</p><div align=center><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587103656832&di=66712ffdc9e92c8f8d316422404b4745&imgtype=0&src=http%3A%2F%2Fpicc.iqshw.com%2Fd%2Ffile%2Fwzgdq%2Ftx%2F2020%2F03%2F18%2F7ff6c46f533c6552ea1d32680cd65b5f.jpg" srcset="/img/loading.gif" alt=""></p></div><p>so,最后忍痛采用了 <code>ifame</code> ,然后问题又来了：<br>在 <code>iframe</code> 里嵌入另外一个页面时。如果 <code>iframe</code> 载入的页面响应较快，或许我们感觉不到页面载入的不同步，但试想，如果一个需要内嵌到 <code>iframe</code> 里的页面的响应很慢，这里会出现一种什么现象呢？这时将会出现所有页面已经载入完成，但在 <code>iframe</code> 元素处，将会出现空白，直到内嵌页面完成载入时，该空白处才会显示新载入的页面。</p><h1 id="如何监听载入完成事件"><a href="#如何监听载入完成事件" class="headerlink" title="如何监听载入完成事件"></a>如何监听载入完成事件</h1><p>想来想去也不可能用生命周期的 <code>mounted</code> 去监听，<code>window.onload()</code> 貌似也不行,查询了很多方法以及偏方，实验了很多次都无法符合需求。<br>最后意外的看了下 <code>iframe</code> 有 <code>onload</code> 事件属性可以监听。</p><div align=center><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587103429747&di=7b698a143ba01d18b448678842555b2b&imgtype=0&src=http%3A%2F%2Fimg.tukexw.com%2Fimg%2Fca2aa14d49d5dc11.jpg" srcset="/img/loading.gif" alt=""></p></div><p>网上找了下觉得这个写法兼容性比较完善，就这了。</p><pre><code class="javascript">var iframe = document.createElement(&quot;iframe&quot;);iframe.src = &quot;http://www.baidu.com/&quot;;if (iframe.attachEvent) {  iframe.attachEvent(&quot;onload&quot;, function () {    alert(&quot;Local iframe is now loaded.&quot;);  });} else {  iframe.onload = function () {    alert(&quot;Local iframe is now loaded.&quot;);  };}</code></pre><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>最后在与第三方界面对接时候也发现了很多坑，一些关于 ifame 嵌套会丢失 cookies 等等的问题，还是没有很好的解决办法，所以啊还是能避免就避免吧，实在坑太多。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>出坑笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前言</title>
    <link href="/2020/04/12/%E5%89%8D%E8%A8%80/"/>
    <url>/2020/04/12/%E5%89%8D%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>绞尽脑汁也没吐出几个有文化的字体,还是得多看点书充充墨。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>本博客由 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 强力驱动，部署在 GitHub 上。</li><li>在此致谢 <a href="https://hexo.fluid-dev.com/docs/" target="_blank" rel="noopener">Fluid</a> 主题的作者。</li></ul><p>建立博客也有一段时间了，恰逢手上还有一些项目赶着要完成，没有过多的时间来总结下之前项目遇到的问题，个人拖延症还是蛮严重的，总想着晚些再处理，拖着拖着就不了了之。</p><p>当初建立这个博客就是为了记录所遇到技术上的启发以及记录相关的笔记，以得到技术上更好的提升，在各类大平台看到大佬写文章总是有种慕名的感觉，为啥他们能够如此深入的理解相关的机制和原理，大概也是熟能生巧吧，借此前言，希望以后的道路能够一帆风顺，不奢求能改变世界，首先让技术改变自己。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
